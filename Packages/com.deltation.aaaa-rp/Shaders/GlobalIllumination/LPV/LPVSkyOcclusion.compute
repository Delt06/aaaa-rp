#pragma kernel CS

#include_with_pragmas "Packages/com.deltation.aaaa-rp/ShaderLibrary/Bindless.hlsl"

#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Core.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Lighting.hlsl"

#define THREAD_GROUP_SIZE 8

TYPED_TEXTURE3D(LPV_CHANNEL_T, _BlockingPotentialSH);

RWTexture3D<float> _SkyOcclusion;

float _Bias;
float _Amplification;

static const float3 s_SkyDirectionWS = float3(0, -1, 0);
static const float4 s_SkyDirectionSH = LPVMath::DirToSH(s_SkyDirectionWS);

LPV_CHANNEL_T FetchBlockingPotential(const float3 neighbourID)
{
    const float3 uv = (neighbourID + float3(0, _Bias, 0)) / LPV::GetGridSize();
    return SAMPLE_TEXTURE3D_LOD(_BlockingPotentialSH, sampler_TrilinearClamp, uv, 0);
}

[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]
void CS(const uint3 dispatchThreadID : SV_DispatchThreadID)
{
    const uint2 xzCellID = dispatchThreadID.xy;
    const uint  gridSize = LPV::GetGridSize();
    if (any(xzCellID >= gridSize))
    {
        return;
    }

    float minOcclusion = 1;

    for (uint dy = 0; dy < gridSize; ++dy)
    {
        const float3        cellID = float3(xzCellID.x, (float)gridSize - 1 - dy, xzCellID.y);
        const LPV_CHANNEL_T blockingPotentialSH = FetchBlockingPotential(cellID);
        const float         occlusion = LPVMath::EvaluateOcclusion(blockingPotentialSH, s_SkyDirectionSH, _Amplification);
        minOcclusion = min(minOcclusion, occlusion);

        _SkyOcclusion[cellID] = minOcclusion;
    }
}