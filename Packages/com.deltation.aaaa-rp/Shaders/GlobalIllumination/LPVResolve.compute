#pragma kernel CS

#pragma multi_compile_local _ BLOCKING_POTENTIAL

#define THREAD_GROUP_SIZE 4

#include_with_pragmas "Packages/com.deltation.aaaa-rp/ShaderLibrary/Bindless.hlsl"

#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Core.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/LightPropagationVolumes.hlsl"

TYPED_TEXTURE2D(LPV_CHANNEL_T, _SourceRedSH);
TYPED_TEXTURE2D(LPV_CHANNEL_T, _SourceGreenSH);
TYPED_TEXTURE2D(LPV_CHANNEL_T, _SourceBlueSH);
TYPED_TEXTURE2D(LPV_CHANNEL_T, _SourceBlockingPotentialSH);

RWTexture3D<LPV_CHANNEL_T> _DestinationRedSH;
RWTexture3D<LPV_CHANNEL_T> _DestinationGreenSH;
RWTexture3D<LPV_CHANNEL_T> _DestinationBlueSH;
RWTexture3D<LPV_CHANNEL_T> _DestinationBlockingPotentialSH;

[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, THREAD_GROUP_SIZE)]
void CS(const uint3 dispatchThreadID : SV_DispatchThreadID)
{
    const uint3 cellID = dispatchThreadID.xyz;
    if (any(cellID >= LPV::GetGridSize()))
    {
        return;
    }

    const uint2 packedCellID = LPV::CellIDToPackedID(cellID);

    _DestinationRedSH[cellID] = _SourceRedSH[packedCellID];
    _DestinationGreenSH[cellID] = _SourceGreenSH[packedCellID];
    _DestinationBlueSH[cellID] = _SourceBlueSH[packedCellID];
    #ifdef BLOCKING_POTENTIAL
    _DestinationBlockingPotentialSH[cellID] = _SourceBlockingPotentialSH[packedCellID];
    #endif
}