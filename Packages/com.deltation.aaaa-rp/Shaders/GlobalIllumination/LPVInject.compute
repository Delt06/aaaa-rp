#pragma kernel CS

// Sources:
// - https://github.com/mafian89/Light-Propagation-Volumes/blob/master/shaders/lightInject.frag
// - https://ericpolman.com/2016/06/28/light-propagation-volumes/

#include_with_pragmas "Packages/com.deltation.aaaa-rp/ShaderLibrary/Bindless.hlsl"

#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Core.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Lighting.hlsl"

#define THREAD_GROUP_SIZE 64

RWTexture3D<LPV_CHANNEL_T> _GridRedUAV;
RWTexture3D<LPV_CHANNEL_T> _GridGreenUAV;
RWTexture3D<LPV_CHANNEL_T> _GridBlueUAV;
RWTexture3D<LPV_CHANNEL_T> _GridBlockingPotentialUAV;

float _Intensity;

#define N_SAMPLES 151
#define R_MAX 0.1
#define BLOCKING_POTENTIAL_POWER 1
#define SHADOWMAP_DEPTH_BIAS -0.01
#define FINAL_INTENSITY_MODIFIER _Intensity

static const float2 Samples[N_SAMPLES] =
{
    float2(-0.2105855460826458, 0.44847103832481405),
    float2(-0.3249367874595762, 0.45194211733208256),
    float2(-0.2215745524228665, 0.24943447347438874),
    float2(-0.060082623613624264, 0.28588622282467613),
    float2(-0.10876121836372676, 0.1516908621362929),
    float2(0.029608993270258344, 0.36225092203424447),
    float2(-0.4416077740215665, 0.5922474888127149),
    float2(0.09844974909210591, 0.5293232385931546),
    float2(-0.242750816128263, 0.5652476929932564),
    float2(0.1849719239883465, 0.42269268543818006),
    float2(0.3025579097363722, 0.5054990750455668),
    float2(-0.6198904961790854, 0.4923955674020746),
    float2(0.1371459445570682, 0.2256376247802212),
    float2(0.07335761833299381, 0.060664733131448045),
    float2(-0.0981114897551485, 0.5038558748024538),
    float2(0.02105320196048943, 0.20449635334174143),
    float2(-0.577615989084985, 0.6751017664470389),
    float2(-0.7047095788535609, 0.6703810066791474),
    float2(-0.3461478915533044, 0.2767411968699174),
    float2(0.22826800325817365, 0.6885961509356942),
    float2(0.008557608781530446, 0.6846674257651739),
    float2(-0.7457514972966308, 0.5525938412112139),
    float2(-0.12675177599317122, 0.03807380965906315),
    float2(0.26001862548878574, 0.9017228978398559),
    float2(-0.12749254424512912, 0.6394141870327132),
    float2(-0.25490982834883025, -0.009623207028237046),
    float2(-0.2832188417687387, 0.7080442976582488),
    float2(-0.5568853398254002, 0.8281675565698587),
    float2(-0.4502169909230217, 0.1983838328508294),
    float2(-0.3374755253275854, 0.12304984569933919),
    float2(0.28022304577413726, 0.19855055835921753),
    float2(-0.21036466694065437, 0.9159129231359),
    float2(0.18360415112566697, 0.02168652914349556),
    float2(-0.4584645969682012, 0.3302427234342433),
    float2(-0.4479511888159913, 0.7410125839426094),
    float2(0.3991624033194776, 0.7988858591043992),
    float2(-0.721662130539607, 0.39995242005235676),
    float2(-0.3442261159253708, 0.8599343768096765),
    float2(-0.8466679858222527, 0.36459222475755637),
    float2(-0.45878496236317035, 0.47334713275894513),
    float2(-0.4372446791568142, -0.0165798426817938),
    float2(0.02100915885650645, -0.06981332644045746),
    float2(0.13110358045707327, 0.8247787987084165),
    float2(0.00823456530315858, 0.8107451419490457),
    float2(0.42797771436580456, 0.5587115156373583),
    float2(0.32214857014394704, 0.33031482110713184),
    float2(-0.22137684848340067, 0.1136363932619775),
    float2(-0.14193395356177185, -0.08604938105381399),
    float2(-0.5536753158083249, -0.18073175280365916),
    float2(-0.5070399904334678, 0.08689622459455082),
    float2(0.52028114635073, 0.3812556209224749),
    float2(-0.08344310105240482, 0.95881586699393),
    float2(-0.5862241280594775, 0.31599501752459136),
    float2(-0.7424917104785005, -0.14495274618636356),
    float2(-0.71268208479312, 0.18074542096312163),
    float2(0.108990027583584, -0.15666655867133028),
    float2(-0.015166808630370787, -0.2487589023599489),
    float2(0.13234925413927323, 0.9492511038584823),
    float2(-0.12322536949396168, 0.7992904731603836),
    float2(0.36403836196961614, 0.6617387426658699),
    float2(0.39955450741769316, 0.41547955572951234),
    float2(-0.5664427084973017, 0.18679436589332576),
    float2(-0.6944101245020164, -0.01343990502836212),
    float2(0.5625324116044776, 0.5279964765578082),
    float2(0.3782464905914933, 0.12643160642731033),
    float2(-0.8454075321944396, 0.014131655121489839),
    float2(0.4206171451921148, 0.25475356609725885),
    float2(-0.9192606507897227, -0.1425594778539232),
    float2(-0.9654723633960183, 0.19512401454226325),
    float2(0.3301371414109351, -0.06358517986619083),
    float2(-0.16766134181208847, -0.2189845370715473),
    float2(-0.542947723738074, -0.061891341033254776),
    float2(0.3145600952238312, -0.18962449885503818),
    float2(-0.3877834273727072, -0.11963285486335329),
    float2(-0.6912736594144696, -0.2576592094385691),
    float2(0.5299377470642048, 0.6429034882840958),
    float2(-0.9092290171229506, -0.2576042816799101),
    float2(-0.756598574200095, -0.3783062261042447),
    float2(-0.3359282441771242, -0.22535842315392463),
    float2(-0.19113437626591812, -0.37544518075404265),
    float2(-0.8316639544686806, 0.24888528214021544),
    float2(-0.3842335024447435, -0.3707398001959058),
    float2(0.0833362819102259, -0.36313489626173856),
    float2(-0.04703622100738214, -0.36769015058577315),
    float2(0.492677762334105, 0.10573129785820412),
    float2(0.5145026631513785, 0.7862005812142474),
    float2(-0.0805949863665465, -0.5098442295614739),
    float2(-0.36144986019027736, -0.5221245642722397),
    float2(-0.5338520212539983, -0.41540245649168794),
    float2(0.08799899906907926, -0.5327065307354413),
    float2(0.6051010684289804, 0.03429146108464676),
    float2(-0.5199138995020798, -0.5290112928940491),
    float2(-0.21573024720399891, -0.5777225511384059),
    float2(-0.48401194020273963, -0.28195487161906563),
    float2(-0.2523937202004908, -0.13494585553274363),
    float2(0.6583622019076383, 0.25357468334574595),
    float2(0.7332514662646883, 0.5471373800529391),
    float2(0.1820533681249794, -0.25589649723524566),
    float2(0.4224076053791508, -0.29088682980126956),
    float2(0.7177903741554872, 0.07235396433442842),
    float2(-0.4771029660046049, -0.6719876518886342),
    float2(0.2534785901118639, -0.40897467057733083),
    float2(-0.27600712311713327, -0.680828645289126),
    float2(-0.6185492815793612, -0.7453116089045722),
    float2(-0.29124157302402065, -0.857368819598208),
    float2(0.6478925289192881, 0.6345225707327742),
    float2(0.5606766211201131, -0.16747590407909985),
    float2(-0.6544148295496951, -0.44189162385444347),
    float2(0.7660305835364689, -0.1163440033664408),
    float2(-0.984396930296487, -0.00434290617490074),
    float2(0.43218518472597256, -0.17091863644713534),
    float2(-0.04413960266224226, -0.703047548286027),
    float2(0.5362856037867374, -0.30318221730699),
    float2(0.8502947919017667, 0.1312310157856249),
    float2(-0.6479918401665218, -0.6051526163645965),
    float2(0.4240350465627807, 0.00822566312902584),
    float2(0.2230332514623785, -0.5431579662998082),
    float2(0.6464790776805429, 0.37436179966037253),
    float2(0.9224902048831116, 0.041580855014303086),
    float2(-0.4324019065826592, -0.787299608631407),
    float2(0.13872153774843388, -0.7113018553685244),
    float2(0.8531859057169597, 0.40581471690902804),
    float2(0.5453953127927622, 0.2093370569631816),
    float2(0.9243895369495867, 0.2642707871055614),
    float2(-0.006129765418066646, -0.8511686376433512),
    float2(0.27384668647208743, -0.7164307699873447),
    float2(0.20004837507761009, -0.8351498888499372),
    float2(0.7777056608159021, 0.2404310438231101),
    float2(-0.7484978798285156, -0.5396097698216022),
    float2(-0.8403766405915871, -0.4558144551108865),
    float2(0.3522383577039254, -0.4758041359031191),
    float2(0.783890871969178, -0.34279882440569154),
    float2(-0.18978613691531687, -0.784090953537453),
    float2(-0.09560238051589443, -0.9250374202209017),
    float2(0.048502964663310166, -0.9549042447300811),
    float2(0.6456628770495716, -0.33756595771091413),
    float2(0.9593865924353975, -0.12327064637742902),
    float2(0.6783583896965726, -0.4787960858888588),
    float2(0.405881740124189, -0.6279578719333552),
    float2(0.8224294731607125, -0.22993697489365883),
    float2(0.5268791482035144, -0.05272822133058308),
    float2(0.6580553825480155, -0.07591007732029698),
    float2(0.5299876015032885, -0.4972122527133582),
    float2(0.7208672506325395, -0.5952659848227987),
    float2(0.5432340182562456, -0.652824644026825),
    float2(0.6747160604935316, -0.19158382758078019),
    float2(0.2201129257859169, -0.1252318363959143),
    float2(0.7993354103716619, -0.46184850776665365),
    float2(0.6856655239366938, -0.7049805434613721),
    float2(0.3666048733591001, -0.803469722802703),
    float2(0.48271502610609507, -0.8050882593415389),
};

float3 ComputeRSMCascadeIndex(const float3 positionWS, const CascadeSelectionParameters parameters)
{
    #if 1
    return parameters.CascadeCount - 1;
    #else
    return ComputeCascadeIndex(positionWS, parameters);
    #endif
}

#define LIGHT_QUANTIZATION_MAX 1024

uint4 QuantizeLightValue(float4 v)
{
    return (uint4)(v * LIGHT_QUANTIZATION_MAX);
}

float4 DeQuantizeLightValue(uint4 v)
{
    return (float4)v / LIGHT_QUANTIZATION_MAX;
}

groupshared uint4 g_AccumulatedLightRedSH;
groupshared uint4 g_AccumulatedLightGreenSH;
groupshared uint4 g_AccumulatedLightBlueSH;
groupshared uint4 g_AccumulatedBlockingPotentialSH;

void ResetAccumulatedValues(const uint3 groupThreadID)
{
    if (groupThreadID.x == 0)
    {
        g_AccumulatedLightRedSH = 0;
        g_AccumulatedLightGreenSH = 0;
        g_AccumulatedLightBlueSH = 0;
        g_AccumulatedBlockingPotentialSH = 0;
    }

    GroupMemoryBarrierWithGroupSync();
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void CS(const uint3 groupID : SV_GroupID, const uint3 groupThreadID : SV_GroupThreadID)
{
    const uint3  cellID = groupID;
    const float3 cellCenterWS = LPV::ComputeCellCenter(cellID);

    if (groupThreadID.x == 0)
    {
        _GridRedUAV[cellID] = 0;
        _GridGreenUAV[cellID] = 0;
        _GridBlueUAV[cellID] = 0;
        _GridBlockingPotentialUAV[cellID] = 0;
    }

    GroupMemoryBarrierWithGroupSync();

    const uint sampleIndex = groupThreadID.x;
    const uint directionalLightCount = GetDirectionalLightCount();

    UNITY_UNROLLX(MAX_DIRECTIONAL_LIGHTS)
    for (uint lightIndex = 0; lightIndex < directionalLightCount; ++lightIndex)
    {
        ResetAccumulatedValues(groupThreadID);

        const float3 lightColor = DirectionalLightColors[lightIndex].rgb;
        const float3 lightDirectionWS = DirectionalLightDirections[lightIndex].xyz;
        const float4 shadowSliceRange_shadowFadeParams = DirectionalLightShadowSliceRanges_ShadowFadeParams[lightIndex];
        const float2 sliceRange = shadowSliceRange_shadowFadeParams.xy;

        UNITY_BRANCH
        if (sliceRange.y > 0)
        {
            AAAAShadowLightSlice cascadeSlices[4];
            LoadCascadeShadowLightSlices(sliceRange, cascadeSlices);

            CascadeSelectionParameters cascadeSelectionParameters;
            cascadeSelectionParameters.Slices = cascadeSlices;
            cascadeSelectionParameters.CascadeCount = sliceRange.y;
            const uint                 selectedCascadeIndex = ComputeRSMCascadeIndex(cellCenterWS, cascadeSelectionParameters);
            const float                radiusModifier = rcp(1 << selectedCascadeIndex);
            const AAAAShadowLightSlice selectedCascadeSlice = cascadeSlices[selectedCascadeIndex];

            UNITY_BRANCH
            if (selectedCascadeSlice.BindlessShadowMapIndex != -1 &&
                selectedCascadeSlice.BindlessRsmPositionMapIndex != -1 &&
                selectedCascadeSlice.BindlessRsmNormalMapIndex != -1 &&
                selectedCascadeSlice.BindlessRsmFluxMapIndex != -1
            )
            {
                const bool   isPerspective = false;
                const float3 shadowCoords = TransformWorldToShadowCoords(cellCenterWS, selectedCascadeSlice.WorldToShadowCoords,
                                                                         isPerspective);
                const float2           sample = Samples[sampleIndex];
                const float3           offsetShadowCoords = shadowCoords.xyz + radiusModifier * R_MAX * float3(sample, 0) + SHADOWMAP_DEPTH_BIAS * lightDirectionWS;
                const RsmValue         rsmValue = SampleRsmValue(selectedCascadeSlice, offsetShadowCoords.xy);
                const Texture2D<float> shadowMap = GetBindlessTexture2DFloat(selectedCascadeSlice.BindlessShadowMapIndex);
                const float            shadowAttenuation = SAMPLE_TEXTURE2D_SHADOW(shadowMap, sampler_LinearClampCompare, offsetShadowCoords);

                const float3 offset = cellCenterWS - rsmValue.positionWS;
                const float  dist2 = max(FLT_MIN, dot(offset, offset));
                const float  SNdotO = max(0, (dot(rsmValue.normalWS, offset)));
                float3       sampleContribution = rsmValue.flux * SNdotO;
                sampleContribution *= sample.x * sample.x / (dist2 * dist2);

                const float4 shCoefficients = LPVMath::DirToCosineLobe(rsmValue.normalWS) * INV_PI;
                const uint4  sampleRedSHQuantized = QuantizeLightValue(shCoefficients * sampleContribution.r);
                const uint4  sampleGreenSHQuantized = QuantizeLightValue(shCoefficients * sampleContribution.g);
                const uint4  sampleBlueSHQuantized = QuantizeLightValue(shCoefficients * sampleContribution.b);

                float sampleBlockingPotential = 1 - saturate(dot(rsmValue.normalWS, lightDirectionWS)) * (1 - shadowAttenuation);
                #if BLOCKING_POTENTIAL_POWER != 1
                sampleBlockingPotential = 1 - pow(1 - sampleBlockingPotential, BLOCKING_POTENTIAL_POWER);
                #endif
                const uint4 sampleBlockingPotentialSHQuantized = QuantizeLightValue(shCoefficients * sampleBlockingPotential);

                UNITY_UNROLL
                for (uint i = 0; i < 4; ++i)
                {
                    InterlockedAdd(g_AccumulatedLightRedSH[i], sampleRedSHQuantized[i]);
                    InterlockedAdd(g_AccumulatedLightGreenSH[i], sampleGreenSHQuantized[i]);
                    InterlockedAdd(g_AccumulatedLightBlueSH[i], sampleBlueSHQuantized[i]);
                    InterlockedAdd(g_AccumulatedBlockingPotentialSH[i], sampleBlockingPotentialSHQuantized[i]);
                }
            }
        }

        GroupMemoryBarrierWithGroupSync();

        if (groupThreadID.x == 0)
        {
            const float invGroupSize = rcp((float)THREAD_GROUP_SIZE);
            const float finalIntensity = FINAL_INTENSITY_MODIFIER * invGroupSize;
            _GridRedUAV[cellID] += finalIntensity * lightColor.r * DeQuantizeLightValue(g_AccumulatedLightRedSH);
            _GridGreenUAV[cellID] += finalIntensity * lightColor.g * DeQuantizeLightValue(g_AccumulatedLightGreenSH);
            _GridBlueUAV[cellID] += finalIntensity * lightColor.b * DeQuantizeLightValue(g_AccumulatedLightBlueSH);

            const float blockingPotentialFinalIntensity = invGroupSize;
            _GridBlockingPotentialUAV[cellID] += blockingPotentialFinalIntensity * DeQuantizeLightValue(g_AccumulatedBlockingPotentialSH);
        }

        GroupMemoryBarrierWithGroupSync();
    }
}