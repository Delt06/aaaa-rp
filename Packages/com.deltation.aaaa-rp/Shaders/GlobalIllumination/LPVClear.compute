#pragma kernel CS

#define THREAD_GROUP_SIZE 64

#include_with_pragmas "Packages/com.deltation.aaaa-rp/ShaderLibrary/Bindless.hlsl"

#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Core.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/LightPropagationVolumes.hlsl"

RWTexture3D<LPV_CHANNEL_T> _GridRedUAV;
RWTexture3D<LPV_CHANNEL_T> _GridGreenUAV;
RWTexture3D<LPV_CHANNEL_T> _GridBlueUAV;
RWTexture3D<LPV_CHANNEL_T> _GridBlockingPotentialUAV;

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void CS(const uint3 dispatchThreadID : SV_DispatchThreadID)
{
    const uint flatCellID = dispatchThreadID.x;
    const uint gridSize = LPV::GetGridSize();
    if (flatCellID >= gridSize * gridSize * gridSize)
    {
        return;
    }

    const uint3 cellID = LPV::FlatCellIDTo3D(flatCellID);
    _GridRedUAV[cellID] = 0;
    _GridGreenUAV[cellID] = 0;
    _GridBlueUAV[cellID] = 0;
    _GridBlockingPotentialUAV[cellID] = 0;
}