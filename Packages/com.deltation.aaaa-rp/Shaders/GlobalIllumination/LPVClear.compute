#pragma kernel CS

#define THREAD_GROUP_SIZE 256

#include_with_pragmas "Packages/com.deltation.aaaa-rp/ShaderLibrary/Bindless.hlsl"

#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Core.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/LightPropagationVolumes.hlsl"

RWByteAddressBuffer _GridRedUAV;
RWByteAddressBuffer _GridGreenUAV;
RWByteAddressBuffer _GridBlueUAV;
RWByteAddressBuffer _GridBlockingPotentialUAV;

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void CS(const uint3 dispatchThreadID : SV_DispatchThreadID)
{
    const uint flatCellID = dispatchThreadID.x;
    const uint gridSize = LPV::GetGridSize();
    if (flatCellID >= gridSize * gridSize * gridSize)
    {
        return;
    }

    const uint address = LPV::FlatCellIDToBufferAddress(flatCellID);
    _GridRedUAV.Store4(address, 0);
    _GridGreenUAV.Store4(address, 0);
    _GridBlueUAV.Store4(address, 0);
    _GridBlockingPotentialUAV.Store4(address, 0);
}