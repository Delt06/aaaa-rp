// Main Source: https://sugulee.wordpress.com/2021/01/19/screen-space-reflections-implementation-and-optimization-part-2-hi-z-tracing-method/
// Attenuation options and dithering: https://sakibsaikia.github.io/graphics/2016/12/26/Screen-Space-Reflection-in-Killing-Floor-2.html#deferred-color-lookup

#pragma kernel CS

#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Depth.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/CameraDepth.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/CameraHZB.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/GBuffer.hlsl"
#include "Packages/com.deltation.aaaa-rp/Runtime/Passes/GlobalIllumination/SSR/SSRComputeShaders.cs.hlsl"

#define MAX_ITERATIONS 48

#define THREAD_GROUP_SIZE TRACE_THREAD_GROUP_SIZE

float4   _SSR_HZBCellCounts[HZBMAX_LEVEL_COUNT];
float4x4 _SSR_ViewProjMatrix;
float4x4 _SSR_InvViewProjMatrix;
float4   _SSR_CameraPosition;
float4   _SSR_ScreenSize;
float    _SSR_MaxThickness;

RWTexture2D<float4> _Result;

float2 PixelUVToNDC(const float2 pixelUV)
{
    float2 result = pixelUV;
    result = result * 2 - 1;
    #ifdef UNITY_UV_STARTS_AT_TOP
    result.y *= -1;
    #endif
    return result;
}

float2 NDCToPixelUV(const float2 ndc)
{
    float2 result = ndc;
    #ifdef UNITY_UV_STARTS_AT_TOP
    result.y *= -1;
    #endif
    result = result * 0.5 + 0.5;
    return result;
}

float Dither(uint2 pixelCoords)
{
    const float ditherThresholds[16] =
    {
        1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
        13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
        4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
        16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
    };
    const uint index = (uint(pixelCoords.x) % 4) * 4 + uint(pixelCoords.y) % 4;
    return ditherThresholds[index];
}

float3 SampleGBufferNormals(const float2 uv)
{
    return UnpackGBufferNormal(SAMPLE_TEXTURE2D_LOD(_GBuffer_Normals, sampler_LinearClamp, uv, 0).xy);
}

float2 GetCellCount(int mipLevel)
{
    return _SSR_HZBCellCounts[mipLevel].xy;
}

float2 GetCell(float2 pos, float2 cellCount)
{
    return float2(floor(pos * cellCount));
}

float3 IntersectDepthPlane(float3 o, float3 d, float z)
{
    return o + d * z;
}

float3 IntersectCellBoundary(float3 o, float3 d, float2 cell, float2 cellCount, float2 crossStep, float2 crossOffset)
{
    float2 index = cell + crossStep;
    float2 boundary = index / cellCount;
    boundary += crossOffset;

    float2 delta = boundary - o.xy;
    delta /= d.xy;
    float t = min(delta.x, delta.y);

    float3 intersection = IntersectDepthPlane(o, d, t);

    return intersection;
}

float GetMinimumDepthPlane(int2 mipCoords, int mipLevel)
{
    return CameraHZB::LoadClampMipCoord(mipCoords, mipLevel);
}

bool CrossedCellBoundary(float2 oldCellIndex, float2 newCellIndex)
{
    return (oldCellIndex.x != newCellIndex.x) || (oldCellIndex.y != newCellIndex.y);
}

float FindIntersection_HiZ(float3     originSS,
                           float3     reflectionSS,
                           float      maxTraceDistance,
                           out float3 intersection)
{
    const int maxLevel = _CameraHZBLevelCount - 1;

    float2 crossStep = float2(reflectionSS.x >= 0 ? 1 : -1, reflectionSS.y >= 0 ? 1 : -1);
    float2 crossOffset = crossStep * _SSR_ScreenSize.zw / 128;
    crossStep = saturate(crossStep);

    float3 ray = originSS.xyz;
    float  minZ = ray.z;
    float  maxZ = ray.z + reflectionSS.z * maxTraceDistance;
    float  deltaZ = (maxZ - minZ);

    float3 o = ray;
    float3 d = reflectionSS * maxTraceDistance;

    int    startLevel = 0;
    int    stopLevel = 0;
    float2 startCellCount = GetCellCount(startLevel);

    float2 rayCell = GetCell(ray.xy, startCellCount);
    ray = IntersectCellBoundary(o, d, rayCell, startCellCount, crossStep, crossOffset * 64);

    int   level = startLevel;
    uint  iter = 0;
    bool  isBackwardRay = LESS_DEPTH(reflectionSS.z, 0);
    float rayDir = isBackwardRay ? -1 : 1;
    float maxThickness = _SSR_MaxThickness * log2(_SSR_ScreenSize.x) * 0.001;

    while (level >= stopLevel && LEQUAL_DEPTH(ray.z*rayDir, maxZ*rayDir) && iter < MAX_ITERATIONS)
    {
        const float2 cellCount = GetCellCount(level);
        const float2 oldCellIdx = GetCell(ray.xy, cellCount);

        const float  cellMinZ = GetMinimumDepthPlane(oldCellIdx, level);
        const float3 tmpRay = (GREATER_DEPTH(cellMinZ, ray.z) && !isBackwardRay) ? IntersectDepthPlane(o, d, (cellMinZ - minZ) / deltaZ) : ray;

        const float2 newCellIdx = GetCell(tmpRay.xy, cellCount);

        const float thickness = level == 0 ? abs(ray.z - cellMinZ) : 0;
        const bool  crossed = (isBackwardRay && GREATER_DEPTH(cellMinZ, ray.z)) || (LESS_DEPTH(thickness, maxThickness)) || CrossedCellBoundary(
            oldCellIdx, newCellIdx);
        ray = crossed ? IntersectCellBoundary(o, d, oldCellIdx, cellCount, crossStep, crossOffset) : tmpRay;
        level = crossed ? min((float)maxLevel, level + 1.0f) : level - 1;

        ++iter;
    }

    bool intersected = (level < stopLevel);
    intersection = ray;

    float intensity = intersected ? 1 : 0;

    return intensity;
}

float DirectionBasedAttenuation(const float3 reflectionWS, const float3 hit)
{
    // This will check the direction of the normal of the reflection sample with the
    // direction of the reflection vector, and if they are pointing in the same direction,
    // it will drown out those reflections since backward facing pixels are not available 
    // for screen space reflection. Attenuate reflections for angles between 90 degrees 
    // and 100 degrees, and drop all contribution beyond the (-100,100)  degree range
    const float3 reflectionNormalWS = SampleGBufferNormals(hit.xy);
    const float  directionBasedAttenuation = smoothstep(-0.17, 0, dot(reflectionNormalWS.xyz, -reflectionWS));
    return directionBasedAttenuation;
}

[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]
void CS(const uint3 dispatchThreadID : SV_DispatchThreadID)
{
    const uint2 pixelCoords = dispatchThreadID.xy;

    UNITY_BRANCH
    if (all((float2)pixelCoords < _SSR_ScreenSize.xy))
    {
        const float2 pixelUV = (pixelCoords.xy) * _SSR_ScreenSize.zw;
        const float2 positionNDC = PixelUVToNDC(pixelUV);
        const float  deviceZ = SampleDeviceDepth(pixelUV);

        float4 positionWS = mul(_SSR_InvViewProjMatrix, float4(positionNDC, deviceZ, 1));
        positionWS /= positionWS.w;

        const float3 eyeWS = normalize(positionWS.xyz - _SSR_CameraPosition.xyz);
        const float3 normalWS = SampleGBufferNormals(pixelUV);

        const float4 positionSS = float4(pixelUV, deviceZ, 1.0f);
        const float3 reflectionWS = reflect(eyeWS, normalWS);

        // This will check the direction of the reflection vector with the view direction,
        // and if they are pointing in the same direction, it will drown out those reflections 
        // since we are limited to pixels visible on screen. Attenuate reflections for angles between 
        // 60 degrees and 75 degrees, and drop all contribution beyond the (-60,60)  degree range
        float cameraFacingReflectionAttenuation = 1 - smoothstep(0.25, 0.5, dot(-eyeWS, reflectionWS));

        // Reject if the reflection vector is pointing back at the viewer.
        UNITY_BRANCH
        if (cameraFacingReflectionAttenuation <= 0)
        {
            _Result[pixelCoords] = 0;
        }
        else
        {
            const float3 reflectionPointWS = 10.0f * reflectionWS + positionWS.xyz;

            float4 reflectionPointSS = mul(_SSR_ViewProjMatrix, float4(reflectionPointWS, 1));
            reflectionPointSS /= reflectionPointSS.w;
            reflectionPointSS.xy = NDCToPixelUV(reflectionPointSS.xy);

            const float3 reflectionSS = normalize(reflectionPointSS.xyz - positionSS.xyz);

            float  attenuation = cameraFacingReflectionAttenuation;
            float  blurRadius;
            float3 hit;
            // Fix self-intersection and some banding.
            // https://sakibsaikia.github.io/graphics/2016/12/26/Screen-Space-Reflection-in-Killing-Floor-2.html#deferred-color-lookup
            const float ditherOffset = 0.001f + Dither(pixelCoords) * 0.0025f;
            float       intensity = FindIntersection_HiZ(positionSS.xyz + reflectionSS * ditherOffset, reflectionSS, 0.35f, hit);

            attenuation *= intensity;

            const float hitDeviceDepth = SampleDeviceDepth(hit.xy);

            UNITY_BRANCH
            if (hitDeviceDepth == UNITY_RAW_FAR_CLIP_VALUE || intensity == 0.0f)
            {
                attenuation = 0;
                blurRadius = 0;
            }
            else
            {
                #if 0
                attenuation *= DirectionBasedAttenuation(reflectionWS, hit);
                #endif

                // Attenuate samples near screen edges.
                const float  uvEdge = 0.05f;
                const float2 uvSamplingAttenuation = smoothstep(0.0, uvEdge, hit.xy) * (1 - smoothstep(1 - uvEdge, 1, hit.xy));
                attenuation *= uvSamplingAttenuation.x * uvSamplingAttenuation.y;

                const GBufferValue gbufferValue = SampleGBuffer(pixelUV);
                blurRadius = gbufferValue.roughness * gbufferValue.roughness;
            }

            _Result[pixelCoords] = float4(hit.xy, blurRadius, attenuation);
        }
    }
}