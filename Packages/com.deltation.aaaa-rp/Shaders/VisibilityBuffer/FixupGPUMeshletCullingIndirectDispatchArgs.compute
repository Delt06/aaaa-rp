#pragma kernel CS

#pragma use_dxc

#include "Packages/com.deltation.aaaa-rp/Runtime/Meshlets/AAAAMeshletComputeShaders.cs.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Compute/IndirectArgs.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Math.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/GPUCullingContexts.hlsl"

ConstantBuffer<GPUCullingContextArray> _CullingContexts;

ByteAddressBuffer   _RequestCounter;
RWByteAddressBuffer _IndirectArgs;

uint _IndirectDrawArgsOffset;

ByteAddressBuffer   _RendererListMeshletCounts;
RWByteAddressBuffer _IndirectDrawArgs;

[numthreads(1, 1, 1)]
void CS(const uint3 groupID : SV_GroupID)
{
    const uint contextIndex = groupID.x;

    // Part 1. Fixup meshlet culling indirect args.
    {
        const uint requestCount = _RequestCounter.Load(contextIndex * 4);

        IndirectDispatchArgs indirectDispatchArgs;
        indirectDispatchArgs.ThreadGroupsX = (uint)AlignUp(requestCount, GPUMESHLET_CULLING_THREAD_GROUP_SIZE) / GPUMESHLET_CULLING_THREAD_GROUP_SIZE;
        indirectDispatchArgs.ThreadGroupsY = 1;
        indirectDispatchArgs.ThreadGroupsZ = 1;
        _IndirectArgs.Store3(IndirectArgs::DispatchArgsStride() * contextIndex, IndirectArgs::PackDispatchArgs(indirectDispatchArgs));
    }

    // Part 2. Compute meshlet render request offsets for all renderer lists. They will be stored sequentially.
    {
        const GPUCullingContext cullingContext = _CullingContexts.Items[contextIndex];

        // Naive prefix sum. Given counts, find all offsets.
        uint startInstance[AAAARENDERERLISTID_COUNT];

        // Start with the base instance of this context.
        for (uint i = 0; i < AAAARENDERERLISTID_COUNT; ++i)
        {
            startInstance[i] = cullingContext.BaseStartInstance;
        }

        // Offset of a renderer list is the sum of meshlet counts of all previous renderer lists.
        for (uint i = 0; i < AAAARENDERERLISTID_COUNT; ++i)
        {
            const uint meshletCount = _RendererListMeshletCounts.Load(4 * (contextIndex * AAAARENDERERLISTID_COUNT + i));

            for (uint j = i + 1; j < AAAARENDERERLISTID_COUNT; ++j)
            {
                startInstance[j] += meshletCount;
            }
        }

        // Store the computed values directly inside the indirect draw args.
        for (uint i = 0; i < AAAARENDERERLISTID_COUNT; ++i)
        {
            const uint drawArgsIndex = contextIndex * AAAARENDERERLISTID_COUNT + i;
            const uint drawArgsAddress = _IndirectDrawArgsOffset + IndirectArgs::DrawArgsStride() * drawArgsIndex;
            // Start instance is the fourth field.
            _IndirectDrawArgs.Store(drawArgsAddress + 4 * 3, startInstance[i]);
        }
    }
}