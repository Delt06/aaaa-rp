#pragma kernel CS

#pragma use_dxc

#include_with_pragmas "Packages/com.deltation.aaaa-rp/ShaderLibrary/Bindless.hlsl"

#include "Packages/com.deltation.aaaa-rp/Runtime/Meshlets/AAAAMeshletComputeShaders.cs.hlsl"
#define THREAD_GROUP_SIZE MESHLET_LIST_BUILD_THREAD_GROUP_SIZE

#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Core.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Math.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/Instances.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/GPUCullingContexts.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/Materials.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/Meshlets.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/MeshLODNodes.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/MeshletListBuild.hlsl"
#include "Packages/com.deltation.aaaa-rp/Runtime/Passes/GPUCullingContext.cs.hlsl"

uint  _ForcedMeshLODNodeDepth;
float _MeshLODErrorThreshold;
uint  _CullingContextIndex;

ConstantBuffer<GPULODSelectionContextArray> _LODSelectionContexts;

StructuredBuffer<AAAAMeshletListBuildJob> _Jobs;

RWByteAddressBuffer _DestinationMeshletsCounter;
RWByteAddressBuffer _DestinationMeshlets;
RWByteAddressBuffer _RendererListMeshletCounts;

void OnSelectedMeshlet(const uint contextIndex, const AAAAMaterialData materialData)
{
    const uint counterOffset = contextIndex * AAAARENDERERLISTID_COUNT + materialData.RendererListID;
    _RendererListMeshletCounts.InterlockedAdd(4 * counterOffset, 1);
}

float2 GetNormalizedScreenCoordinates(const float4x4 mvpMatrix, const float3 positionWS)
{
    float4 centerCS = mul(mvpMatrix, float4(positionWS, 1.0f));
    centerCS.xy /= centerCS.w;
    centerCS.xy = centerCS.xy * 0.5f + 0.5f;
    return centerCS.xy;
}

float GetScreenBoundRadiusSq(const GPULODSelectionContext lodSelectionContext, const float4 boundsWS)
{
    const float4x4 vpMatrix = lodSelectionContext.ViewProjectionMatrix;
    const float2   p0 = GetNormalizedScreenCoordinates(vpMatrix, boundsWS.xyz);
    const float2   p1 = GetNormalizedScreenCoordinates(vpMatrix, boundsWS.xyz + lodSelectionContext.CameraUp.xyz * boundsWS.w);
    const float2   p2 = GetNormalizedScreenCoordinates(vpMatrix, boundsWS.xyz + lodSelectionContext.CameraRight.xyz * boundsWS.w);

    const float2 v0 = (p1 - p0) * lodSelectionContext.ScreenSizePixels;
    const float2 v1 = (p2 - p0) * lodSelectionContext.ScreenSizePixels;
    return max(dot(v0, v0), dot(v1, v1));
}

bool ShouldPushMeshletRenderRequests(const GPULODSelectionContext lodSelectionContext, const AAAAMeshLODNode meshLODNode,
                                     const AAAAInstanceData       instanceData, const float                  distanceToViewSq)
{
    bool result;

    UNITY_BRANCH
    if (_ForcedMeshLODNodeDepth != UINT_MAX)
    {
        const bool isLeaf = meshLODNode.LevelIndex == instanceData.MeshLODLevelCount - 1;
        result = meshLODNode.LevelIndex == _ForcedMeshLODNodeDepth || meshLODNode.LevelIndex < _ForcedMeshLODNodeDepth && isLeaf;
    }
    else
    {
        const float4 boundsWS = TransformBoundingSphere(meshLODNode.Bounds, instanceData.ObjectToWorldMatrix);
        const float4 parentBoundsWS = TransformBoundingSphere(meshLODNode.ParentBounds, instanceData.ObjectToWorldMatrix);
        const float  error = meshLODNode.Error * GetScreenBoundRadiusSq(lodSelectionContext, boundsWS);
        const float  parentError = meshLODNode.ParentError >= 0
                                      ? meshLODNode.ParentError * GetScreenBoundRadiusSq(lodSelectionContext, parentBoundsWS)
                                      : FLT_INF;
        const float threshold = _MeshLODErrorThreshold * distanceToViewSq * instanceData.LODErrorScale;
        result = parentError > threshold && error <= threshold;
    }

    return result;
}

groupshared uint g_CachedNodes_MeshletCount[MAX_LODNODES_PER_THREAD_GROUP];
groupshared uint g_CachedNodes_MeshletStartIndex[MAX_LODNODES_PER_THREAD_GROUP];

groupshared uint g_PassedNodeIndices[MAX_LODNODES_PER_THREAD_GROUP];
groupshared uint g_PassedMeshletCount;
groupshared uint g_PassedNodeCount;

groupshared uint g_MeshletWriteOffset;

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void CS(const uint3 groupThreadID : SV_GroupThreadID, const uint3 groupID : SV_GroupID)
{
    if (groupThreadID.x == 0)
    {
        g_PassedMeshletCount = 0;
        g_PassedNodeCount = 0;
    }

    GroupMemoryBarrierWithGroupSync();

    const uint                    contextIndex = _CullingContextIndex;
    const GPULODSelectionContext  lodSelectionContext = _LODSelectionContexts.Items[contextIndex];
    const AAAAMeshletListBuildJob job = _Jobs[groupID.x];
    const AAAAInstanceData        instanceData = PullInstanceData(job.InstanceID);
    const AAAAMaterialData        materialData = PullMaterialData(instanceData.MaterialIndex);

    const float3 instanceBoundsCenter = (instanceData.AABBMin.xyz + instanceData.AABBMax.xyz) * 0.5f;
    const float  distanceToViewSq = Length2(lodSelectionContext.CameraPosition.xyz - instanceBoundsCenter);

    const uint from = instanceData.TopMeshLODStartIndex + job.MeshLODNodeOffset;
    const uint nodeCount = min(MAX_LODNODES_PER_THREAD_GROUP, job.MeshLODNodeCount);

    for (uint i = groupThreadID.x; i < nodeCount; i += THREAD_GROUP_SIZE)
    {
        const uint            nodeIndex = from + i;
        const AAAAMeshLODNode meshLODNode = PullMeshLODNode(nodeIndex);

        const uint cachedNodeIndex = i;
        g_CachedNodes_MeshletCount[cachedNodeIndex] = meshLODNode.MeshletCount;
        g_CachedNodes_MeshletStartIndex[cachedNodeIndex] = meshLODNode.MeshletStartIndex;

        if (ShouldPushMeshletRenderRequests(lodSelectionContext, meshLODNode, instanceData, distanceToViewSq))
        {
            uint listOffset;
            InterlockedAdd(g_PassedNodeCount, 1, listOffset);
            InterlockedAdd(g_PassedMeshletCount, meshLODNode.MeshletCount);
            g_PassedNodeIndices[listOffset] = cachedNodeIndex;

            OnSelectedMeshlet(contextIndex, materialData);
        }
    }

    GroupMemoryBarrierWithGroupSync();

    if (groupThreadID.x == 0)
    {
        _DestinationMeshletsCounter.InterlockedAdd(contextIndex * 4, g_PassedMeshletCount, g_MeshletWriteOffset);
    }

    GroupMemoryBarrierWithGroupSync();

    for (uint listIndex = groupThreadID.x; listIndex < g_PassedNodeCount; listIndex += THREAD_GROUP_SIZE)
    {
        const uint cachedNodeIndex = g_PassedNodeIndices[listIndex];
        const uint meshletCount = g_CachedNodes_MeshletCount[cachedNodeIndex];
        const uint meshletStartIndex = g_CachedNodes_MeshletStartIndex[cachedNodeIndex];

        for (uint i = 0; i < meshletCount; ++i)
        {
            AAAAMeshletRenderRequest meshletRenderRequest;
            meshletRenderRequest.InstanceID = job.InstanceID;
            meshletRenderRequest.MeshletID = meshletStartIndex + i;

            uint writeOffset;
            InterlockedAdd(g_MeshletWriteOffset, 1, writeOffset);
            // TODO: write with offset depending on the culling index
            const uint storeOffset = 0;
            StoreMeshletRenderRequest(_DestinationMeshlets, storeOffset, writeOffset, meshletRenderRequest);
        }
    }
}