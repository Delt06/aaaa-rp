#pragma kernel CS

#pragma enable_d3d11_debug_symbols

#include "Packages/com.deltation.aaaa-rp/Runtime/Meshlets/AAAAMeshletComputeShaders.cs.hlsl"
#define THREAD_GROUP_SIZE MESHLET_LIST_BUILD_THREAD_GROUP_SIZE

#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Core.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Math.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/Instances.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/Meshlets.hlsl"

float4   _CameraFrustumPlanes[PLANES_IN_FRUSTUM];
float4x4 _CameraViewProjection;

RWByteAddressBuffer _DestinationMeshletsCounter;
RWByteAddressBuffer _DestinationMeshlets;

#define LIST_SIZE 1024
groupshared uint g_MeshletIndices[LIST_SIZE];
groupshared int g_MeshletCount;

void MeshletList_Push(const uint meshletIndex)
{
    uint offset;
    InterlockedAdd(g_MeshletCount, 1, offset);
    g_MeshletIndices[offset] = meshletIndex;
}

uint MeshletList_TryPop()
{
    int oldCount = 0;
    InterlockedAdd(g_MeshletCount, -1, oldCount);

    if (oldCount < 1)
    {
        return -1;
    }

    return g_MeshletIndices[oldCount - 1];
}

void PushMeshletRenderRequest(const uint instanceID, const uint meshletIndex)
{
    uint meshletWriteOffset;
    _DestinationMeshletsCounter.InterlockedAdd(0, 1, meshletWriteOffset);

    AAAAMeshletRenderRequest meshletRenderRequest;
    meshletRenderRequest.InstanceID = instanceID;
    meshletRenderRequest.MeshletID = meshletIndex;

    StoreMeshletRenderRequest(_DestinationMeshlets, meshletWriteOffset, meshletRenderRequest);
} 

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void CS(const uint3 groupThreadID : SV_GroupThreadID, const uint3 groupID : SV_GroupID)
{
    const uint instanceID = groupID.x;
    if (instanceID >= _InstanceCount)
    {
        return;
    }

    const AAAAInstanceData instanceData = PullInstanceData(instanceID);

    const AABB   aabbOS = AABB::Create(instanceData.AABBMin.xyz, instanceData.AABBMax.xyz);
    const AABB   aabbWS = TransformAABB(aabbOS, instanceData.ObjectToWorldMatrix);
    const float4 instanceBoundingSphere = AABBToBoundingSphere(aabbWS);

    if (!FrustumVsSphereCulling(_CameraFrustumPlanes, instanceBoundingSphere))
    {
        return;
    }

    const uint localThreadIndex = groupThreadID.x;

    if (localThreadIndex == 0)
    {
        g_MeshletCount = 0;
    }
    
    GroupMemoryBarrierWithGroupSync();

    const float2 instanceSizeSS = AABBScreenSize(aabbWS, _CameraViewProjection);
    
    for (uint localMeshletIndex = localThreadIndex; localMeshletIndex < instanceData.TopMeshletCount; localMeshletIndex += THREAD_GROUP_SIZE)
    {
        MeshletList_Push(instanceData.TopMeshletStartIndex + localMeshletIndex);
    }

    GroupMemoryBarrierWithGroupSync();
    
    UNITY_LOOP
    while (true)
    {
        const uint poppedMeshletIndex = MeshletList_TryPop();
        if (poppedMeshletIndex == -1)
        {
            break;
        }

        const uint        parentMeshletIndex = poppedMeshletIndex;
        const AAAAMeshlet parentMeshlet = PullMeshletData(parentMeshletIndex);

        if (0)
        {
            PushMeshletRenderRequest(instanceID, parentMeshletIndex);
        }
        else
        {
            bool anyChildren = false;
            
            UNITY_LOOP
            for (uint i = 0; i < (uint) CHILDREN_COUNT; ++i)
            {
                const uint childMeshletIndex = parentMeshlet.ChildrenNodeIndices[i];
                if (childMeshletIndex == (uint)INVALID_CHILD_INDEX)
                {
                    continue;
                }

                const AAAAMeshlet childMeshlet = PullMeshletData(childMeshletIndex);

                PushMeshletRenderRequest(instanceID, childMeshletIndex);
                anyChildren = true;
            }

            if (!anyChildren)
            {
                PushMeshletRenderRequest(instanceID, parentMeshletIndex);
            }
        }
    }
}