#pragma kernel CS

#include "Packages/com.deltation.aaaa-rp/Runtime/Meshlets/AAAAMeshletComputeShaders.cs.hlsl"
#define THREAD_GROUP_SIZE MESHLET_LIST_BUILD_THREAD_GROUP_SIZE

#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Core.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Math.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/Instances.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/Meshlets.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/MeshLODNodes.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/DataStructures/GroupSharedMPMCQueue.hlsl"

float4   _CameraFrustumPlanes[PLANES_IN_FRUSTUM];
float4x4 _CameraViewProjection;

uint _ForcedMeshLODNodeDepth;

RWByteAddressBuffer _DestinationMeshletsCounter;
RWByteAddressBuffer _DestinationMeshlets;

groupshared uint g_CurrentTopLODNode;

#define VISITED_NODES_MASK_BITS 32
#define MAX_VISITED_NODE_MASKS (MAX_MESH_LODNODES_PER_INSTANCE / VISITED_NODES_MASK_BITS)
groupshared uint g_VisitedNodes[MAX_VISITED_NODE_MASKS];

bool TryVisitNode(const uint localNodeIndex)
{
    bool success;

    if (localNodeIndex >= MAX_MESH_LODNODES_PER_INSTANCE)
    {
        success = false;
    }
    else
    {
        const uint maskIndex = localNodeIndex / VISITED_NODES_MASK_BITS;
        const uint bitIndex = localNodeIndex % VISITED_NODES_MASK_BITS;
        const uint thisMask = 1u << bitIndex;

        uint oldMask;
        InterlockedOr(g_VisitedNodes[maskIndex], thisMask, oldMask);
        success = (oldMask & thisMask) == 0;
    }

    return success;
}

bool MeshLODNodes_TryPush(const uint nodeIndex)
{
    return GroupSharedMPMCQueue::TryEnqueue(nodeIndex);
}

void MeshLODNodes_Push(const uint nodeIndex)
{
    GroupSharedMPMCQueue::Enqueue(nodeIndex);
}

uint MeshLODNodes_TryPop()
{
    uint       item;
    const bool success = GroupSharedMPMCQueue::TryDequeue(item);
    return success ? item : UINT_MAX;
}

void PushMeshletRenderRequests(const uint instanceID, const AAAAMeshLODNode meshLODNode)
{
    uint meshletWriteOffset;
    _DestinationMeshletsCounter.InterlockedAdd(0, meshLODNode.MeshletCount, meshletWriteOffset);

    for (uint i = 0; i < meshLODNode.MeshletCount; ++i)
    {
        AAAAMeshletRenderRequest meshletRenderRequest;
        meshletRenderRequest.InstanceID = instanceID;
        meshletRenderRequest.MeshletID = meshLODNode.MeshletStartIndex + i;

        StoreMeshletRenderRequest(_DestinationMeshlets, meshletWriteOffset + i, meshletRenderRequest);
    }
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void CS(const uint3 groupThreadID : SV_GroupThreadID, const uint3 groupID : SV_GroupID)
{
    const uint instanceID = groupID.x;
    if (instanceID >= _InstanceCount)
    {
        return;
    }

    const AAAAInstanceData instanceData = PullInstanceData(instanceID);

    const AABB   aabbOS = AABB::Create(instanceData.AABBMin.xyz, instanceData.AABBMax.xyz);
    const AABB   aabbWS = TransformAABB(aabbOS, instanceData.ObjectToWorldMatrix);
    const float4 instanceBoundingSphere = AABBToBoundingSphere(aabbWS);

    UNITY_BRANCH
    if (!FrustumVsSphereCulling(_CameraFrustumPlanes, instanceBoundingSphere))
    {
        return;
    }

    const uint localThreadIndex = groupThreadID.x;

    if (localThreadIndex == 0)
    {
        g_CurrentTopLODNode = 0;
    }

    UNITY_LOOP
    for (uint localMaskIndex = localThreadIndex; localMaskIndex < min(MAX_VISITED_NODE_MASKS, instanceData.TotalMeshLODCount); localMaskIndex +=
         THREAD_GROUP_SIZE)
    {
        g_VisitedNodes[localMaskIndex] = 0;
    }

    GroupSharedMPMCQueue::Init(localThreadIndex, THREAD_GROUP_SIZE);

    GroupMemoryBarrierWithGroupSync();

    const float2 instanceSizeSS = AABBScreenSize(aabbWS, _CameraViewProjection);

    bool stopProcessing = false;

    UNITY_LOOP
    while (!stopProcessing)
    {
        uint topLODOffset = UINT_MAX;

        // Check if there are top level node to process
        if (g_CurrentTopLODNode <= instanceData.TopMeshLODCount - 1)
        {
            // Try to take a node 
            InterlockedAdd(g_CurrentTopLODNode, 1, topLODOffset);
            if (topLODOffset >= instanceData.TopMeshLODCount)
            {
                topLODOffset = UINT_MAX;
            }
        }

        UNITY_LOOP
        while (true)
        {
            uint parentNodeIndex;

            UNITY_BRANCH
            if (topLODOffset != UINT_MAX)
            {
                // Process the take top level node directly, without pushing to the queue
                parentNodeIndex = instanceData.TopMeshLODStartIndex + topLODOffset;
                topLODOffset = UINT_MAX;
            }
            else
            {
                // No more top level nodes left, take one from the queue
                parentNodeIndex = MeshLODNodes_TryPop();
            }

            UNITY_BRANCH
            if (parentNodeIndex == UINT_MAX)
            {
                stopProcessing = true;
                break;
            }
            if (!TryVisitNode(parentNodeIndex - instanceData.TopMeshLODStartIndex))
            {
                continue;
            }

            const AAAAMeshLODNode parentNode = PullMeshLODNode(parentNodeIndex);

            UNITY_BRANCH
            if (parentNode.IsLeaf || parentNode.LevelIndex == _ForcedMeshLODNodeDepth)
            {
                PushMeshletRenderRequests(instanceID, parentNode);
            }
            else
            {
                UNITY_LOOP
                for (uint i = 0; i < (uint)CHILDREN_COUNT; ++i)
                {
                    const uint childNodeIndex = parentNode.ChildrenNodeIndices[i];
                    if (childNodeIndex == (uint)INVALID_CHILD_INDEX)
                    {
                        break;
                    }

                    MeshLODNodes_TryPush(childNodeIndex);
                }
            }
        }
    }
}