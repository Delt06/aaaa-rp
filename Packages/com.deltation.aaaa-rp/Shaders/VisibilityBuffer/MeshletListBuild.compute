#pragma kernel CS

#include "Packages/com.deltation.aaaa-rp/Runtime/Meshlets/AAAAMeshletComputeShaders.cs.hlsl"
#define THREAD_GROUP_SIZE MESHLET_LIST_BUILD_THREAD_GROUP_SIZE

#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Core.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Math.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/Instances.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/Meshlets.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/MeshLODNodes.hlsl"

float4   _CameraFrustumPlanes[PLANES_IN_FRUSTUM];
float4x4 _CameraViewProjection;

uint _ForcedMeshLODNodeDepth;

RWByteAddressBuffer _DestinationMeshletsCounter;
RWByteAddressBuffer _DestinationMeshlets;

#define LIST_SIZE 1024
groupshared uint g_MeshLODNodes[LIST_SIZE];
groupshared int  g_MeshLODNodeCount;

#define VISITED_NODES_MASK_BITS 32
#define MAX_VISITED_NODE_MASKS (MAX_MESH_LODNODES_PER_INSTANCE / VISITED_NODES_MASK_BITS) 
groupshared uint g_VisitedNodes[MAX_VISITED_NODE_MASKS];

bool TryVisitNode(const uint localNodeIndex)
{
    bool success;

    if (localNodeIndex >= MAX_MESH_LODNODES_PER_INSTANCE)
    {
        success = false;
    }
    else
    {
        const uint maskIndex = localNodeIndex / VISITED_NODES_MASK_BITS;
        const uint bitIndex = localNodeIndex % VISITED_NODES_MASK_BITS;
        const uint thisMask = 1u << bitIndex;

        uint oldMask;
        InterlockedOr(g_VisitedNodes[maskIndex], thisMask, oldMask);
        success = (oldMask & thisMask) == 0;
    }

    return success;
}

void MeshLODNodes_Push(const uint nodeIndex)
{
    uint offset;
    InterlockedAdd(g_MeshLODNodeCount, 1, offset);
    g_MeshLODNodes[offset] = nodeIndex;
}

uint MeshLODNodes_TryPop()
{
    int oldCount = 0;
    InterlockedAdd(g_MeshLODNodeCount, -1, oldCount);

    uint returnValue;

    if (oldCount < 1)
    {
        returnValue = UINT_MAX;
    }
    else
    {
        returnValue = g_MeshLODNodes[oldCount - 1];   
    }

    return returnValue;
}

void PushMeshletRenderRequests(const uint instanceID, const AAAAMeshLODNode meshLODNode)
{
    uint meshletWriteOffset;
    _DestinationMeshletsCounter.InterlockedAdd(0, meshLODNode.MeshletCount, meshletWriteOffset);

    for (uint i = 0; i < meshLODNode.MeshletCount; ++i)
    {
        AAAAMeshletRenderRequest meshletRenderRequest;
        meshletRenderRequest.InstanceID = instanceID;
        meshletRenderRequest.MeshletID = meshLODNode.MeshletStartIndex + i;

        StoreMeshletRenderRequest(_DestinationMeshlets, meshletWriteOffset + i, meshletRenderRequest);
    }
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void CS(const uint3 groupThreadID : SV_GroupThreadID, const uint3 groupID : SV_GroupID)
{
    const uint instanceID = groupID.x;
    if (instanceID >= _InstanceCount)
    {
        return;
    }

    const AAAAInstanceData instanceData = PullInstanceData(instanceID);

    const AABB   aabbOS = AABB::Create(instanceData.AABBMin.xyz, instanceData.AABBMax.xyz);
    const AABB   aabbWS = TransformAABB(aabbOS, instanceData.ObjectToWorldMatrix);
    const float4 instanceBoundingSphere = AABBToBoundingSphere(aabbWS);

    UNITY_BRANCH
    if (!FrustumVsSphereCulling(_CameraFrustumPlanes, instanceBoundingSphere))
    {
        return;
    }

    const uint localThreadIndex = groupThreadID.x;

    if (localThreadIndex == 0)
    {
        g_MeshLODNodeCount = 0;
    }

    GroupMemoryBarrierWithGroupSync();

    const float2 instanceSizeSS = AABBScreenSize(aabbWS, _CameraViewProjection);

    UNITY_LOOP
    for (uint localNodeIndex = localThreadIndex; localNodeIndex < instanceData.TopMeshLODCount; localNodeIndex += THREAD_GROUP_SIZE)
    {
        MeshLODNodes_Push(instanceData.TopMeshLODStartIndex + localNodeIndex);
    }

    UNITY_LOOP
    for (uint localMaskIndex = localThreadIndex; localMaskIndex < min(MAX_VISITED_NODE_MASKS, instanceData.TotalMeshLODCount); localMaskIndex += THREAD_GROUP_SIZE)
    {
        g_VisitedNodes[localMaskIndex] = 0;
    } 

    GroupMemoryBarrierWithGroupSync();

    UNITY_LOOP
    while (true)
    {
        const uint parentNodeIndex = MeshLODNodes_TryPop();
        UNITY_BRANCH
        if (parentNodeIndex == UINT_MAX)
        {
            break;
        }
        else
        {
            if (!TryVisitNode(parentNodeIndex - instanceData.TopMeshLODStartIndex))
            {
                continue;
            }
            
            const AAAAMeshLODNode parentNode = PullMeshLODNode(parentNodeIndex);

            UNITY_BRANCH
            if (parentNode.IsLeaf || parentNode.LevelIndex == _ForcedMeshLODNodeDepth)
            {
                PushMeshletRenderRequests(instanceID, parentNode);
            }
            else
            {
                UNITY_LOOP
                for (uint i = 0; i < (uint)CHILDREN_COUNT; ++i)
                {
                    const uint childNodeIndex = parentNode.ChildrenNodeIndices[i];
                    if (childNodeIndex == (uint)INVALID_CHILD_INDEX)
                    {
                        break;
                    }
                    
                    MeshLODNodes_Push(childNodeIndex);
                }
            }
        }
    }
}