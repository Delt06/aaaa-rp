#pragma kernel CS

#pragma use_dxc

#pragma multi_compile_local _ MAIN_PASS FALSE_NEGATIVE_PASS
#pragma multi_compile_local _ DISABLE_OCCLUSION_CULLING

#include_with_pragmas "Packages/com.deltation.aaaa-rp/ShaderLibrary/Bindless.hlsl"
#include_with_pragmas "Packages/com.deltation.aaaa-rp/Shaders/Debugging/GPUCullingDebugPragma.hlsl"

#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Debug/GPUCullingDebug.hlsl"

#if defined(MAIN_PASS) || defined(FALSE_NEGATIVE_PASS)
#define OCCLUSION_CULLING_ON
#endif

#include "Packages/com.deltation.aaaa-rp/Runtime/Meshlets/AAAAMeshletComputeShaders.cs.hlsl"
#define THREAD_GROUP_SIZE GPUMESHLET_CULLING_THREAD_GROUP_SIZE

#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Core.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Math.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Compute/IndirectArgs.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/Instances.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/GPUCullingContexts.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/Materials.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/Meshlets.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/MeshletCulling.hlsl"
#define RW_OCCLUSION_CULLING_INSTANCE_VISIBILITY_MASK
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/VisibilityBuffer/OcclusionCulling.hlsl"

ConstantBuffer<GPUCullingContextArray> _CullingContexts;

ByteAddressBuffer _SourceMeshletsCounters;
ByteAddressBuffer _SourceMeshlets;

RWByteAddressBuffer _IndirectDrawArgs;
uint                _IndirectDrawArgsOffset;
RWByteAddressBuffer _DestinationMeshlets;

void DispatchThreadIDToContextMeshletID(const uint3 dispatchThreadID, out uint contextIndex, out uint contextMeshletID, out uint contextMeshletCount)
{
    contextIndex = 0;
    contextMeshletID = dispatchThreadID.x;

    uint contextMeshletCounts[MAX_CULLING_CONTEXTS_PER_BATCH];

    for (uint i = 0; i < MAX_CULLING_CONTEXTS_PER_BATCH; i += 4)
    {
        const uint4 loadedContextMeshletCounts = _SourceMeshletsCounters.Load4(i * 4);
        contextMeshletCounts[i + 0] = loadedContextMeshletCounts[0];
        contextMeshletCounts[i + 1] = loadedContextMeshletCounts[1];
        contextMeshletCounts[i + 2] = loadedContextMeshletCounts[2];
        contextMeshletCounts[i + 3] = loadedContextMeshletCounts[3];
    }

    for (uint i = 0; i < MAX_CULLING_CONTEXTS_PER_BATCH; ++i)
    {
        const uint alignedContextMeshletCounts = AlignUp(contextMeshletCounts[i], THREAD_GROUP_SIZE);
        if (contextMeshletID < alignedContextMeshletCounts)
        {
            break;
        }

        ++contextIndex;
        contextMeshletID -= alignedContextMeshletCounts;
    }

    contextMeshletCount = contextMeshletCounts[contextIndex];
}

bool Culling(const GPUCullingContext cullingContext, const AAAAInstanceData instanceData, const uint rendererListID, const AAAAMeshlet meshletData)
{
    const float4           boundingSphereWS = TransformBoundingSphere(meshletData.BoundingSphere, instanceData.ObjectToWorldMatrix);
    const BoundingSquareSS boundingSquareSS = OcclusionCulling::ComputeScreenSpaceBoundingSquare(boundingSphereWS, cullingContext.ViewProjectionMatrix);

    bool result = false;

    UNITY_BRANCH
    if (FrustumVsSphereCulling(cullingContext.FrustumPlanes, boundingSphereWS) &&
        LightSphereCulling(cullingContext.CullingSphereLS, cullingContext.ViewMatrix, boundingSphereWS))
    {
        const float3 viewForwardDirWS = GetViewForwardDir(cullingContext.ViewMatrix);
        const bool   isPerspective = cullingContext.CameraIsPerspective;

        UNITY_BRANCH
        if (rendererListID & AAAARENDERERLISTID_CULL_OFF ||
            ConeCulling(cullingContext.CameraPosition.xyz, viewForwardDirWS, isPerspective, instanceData, meshletData))
        {
            #if defined(FALSE_NEGATIVE_PASS) && !defined(DISABLE_OCCLUSION_CULLING)
        
            UNITY_BRANCH
            if (OcclusionCulling::IsVisible(boundingSquareSS))
            {
                result = true;
            }
            else
            {
                GPUCullingDebug::OnCulled(boundingSquareSS, AAAAGPUCULLINGDEBUGGRANULARITY_MESHLET, AAAAGPUCULLINGDEBUGTYPE_OCCLUSION);
            }
        
            #else

            result = true;

            #endif
        }
        else
        {
            GPUCullingDebug::OnCulled(boundingSquareSS, AAAAGPUCULLINGDEBUGGRANULARITY_MESHLET, AAAAGPUCULLINGDEBUGTYPE_CONE);
        }
    }
    else
    {
        GPUCullingDebug::OnCulled(boundingSquareSS, AAAAGPUCULLINGDEBUGGRANULARITY_MESHLET, AAAAGPUCULLINGDEBUGTYPE_FRUSTUM);
    }

    return result;
}

uint GetRendererListID(const AAAAInstanceData instanceData, const AAAAMaterialData materialData)
{
    uint rendererListID = materialData.RendererListID;

    if (instanceData.Flags & AAAAINSTANCEFLAGS_FLIP_WINDING_ORDER &&
        !(rendererListID & AAAARENDERERLISTID_CULL_OFF))
    {
        if (rendererListID & AAAARENDERERLISTID_CULL_FRONT)
        {
            rendererListID &= ~AAAARENDERERLISTID_CULL_FRONT;
        }
        else
        {
            rendererListID |= AAAARENDERERLISTID_CULL_FRONT;
        }
    }

    return rendererListID;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void CS(const uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint contextIndex, contextMeshletID, contextMeshletCount;
    DispatchThreadIDToContextMeshletID(dispatchThreadID, contextIndex, contextMeshletID, contextMeshletCount);

    UNITY_BRANCH
    if (contextMeshletID >= contextMeshletCount)
    {
        return;
    }

    const GPUCullingContext cullingContext = _CullingContexts.Items[contextIndex];

    const AAAAMeshletRenderRequest meshletRenderRequest = PullMeshletRenderRequest(_SourceMeshlets, cullingContext.MeshletRenderRequestsOffset,
                                                                                   contextMeshletID);
    const AAAAInstanceData instanceData = PullInstanceData(meshletRenderRequest.InstanceID);
    const AAAAMaterialData materialData = PullMaterialData(instanceData.MaterialIndex);
    const uint             rendererListID = GetRendererListID(instanceData, materialData);
    const AAAAMeshlet      meshlet = PullMeshletData(meshletRenderRequest.MeshletID);

    if (!Culling(cullingContext, instanceData, rendererListID, meshlet))
    {
        return;
    }

    uint localRenderRequestWriteOffset = 0;
    uint drawArgsOffset = _IndirectDrawArgsOffset;
    drawArgsOffset += IndirectArgs::DrawArgsStride() * (contextIndex * AAAARENDERERLISTID_COUNT + rendererListID);

    // Instance count is the second field.
    _IndirectDrawArgs.InterlockedAdd(drawArgsOffset + 4, 1, localRenderRequestWriteOffset);

    // Start instance is the fourth field.
    const uint startInstance = _IndirectDrawArgs.Load(drawArgsOffset + 4 * 3);

    StoreMeshletRenderRequest(_DestinationMeshlets, 0, localRenderRequestWriteOffset + startInstance, meshletRenderRequest);
    #ifdef OCCLUSION_CULLING_ON
    OcclusionCulling::MarkVisibleThisFrame(meshletRenderRequest.InstanceID);
    #endif
}