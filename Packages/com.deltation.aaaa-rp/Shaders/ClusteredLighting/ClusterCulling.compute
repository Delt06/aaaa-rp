#pragma kernel CS

#include "Packages/com.deltation.aaaa-rp/Shaders/ClusteredLighting/Common.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/Math.hlsl"
#include "Packages/com.deltation.aaaa-rp/ShaderLibrary/PunctualLights.hlsl"

#define THREAD_GROUP_SIZE CLUSTER_CULLING_THREAD_GROUP_SIZE

StructuredBuffer<AAAAClusterBounds> _ClusterBounds;
ByteAddressBuffer                   _ActiveClustersCount;
ByteAddressBuffer                   _ActiveClustersList;

RWByteAddressBuffer                               _LightIndexCounter;
RWByteAddressBuffer                               _LightIndexList;
RWStructuredBuffer<AAAAClusteredLightingGridCell> _LightGrid;

groupshared AAAAPunctualLightData g_CachedPunctualLights[THREAD_GROUP_SIZE];

void LoadCachedLights(const uint cachedLightIndex, const uint lightIndex)
{
    UNITY_BRANCH
    if (lightIndex < PunctualLightCount)
    {
        g_CachedPunctualLights[cachedLightIndex] = _PunctualLights[lightIndex];
    }
    else
    {
        g_CachedPunctualLights[cachedLightIndex] = (AAAAPunctualLightData)0;
    }
}

float4 ClusterBoundsToBoundingSphere(const AAAAClusterBounds clusterBounds)
{
    AABB aabb;
    aabb.boundsMin = clusterBounds.Min.xyz;
    aabb.boundsMax = clusterBounds.Max.xyz;
    return AABBToBoundingSphere(aabb);
}

float ComputePointToAABBDistanceSq(const float3 pointVS, const AAAAClusterBounds clusterBoundsVS)
{
    float sqDist = 0.0;

    UNITY_UNROLL
    for (int i = 0; i < 3; ++i)
    {
        float v = pointVS[i];
        if (v < clusterBoundsVS.Min[i])
        {
            sqDist += (clusterBoundsVS.Min[i] - v) * (clusterBoundsVS.Min[i] - v);
        }
        if (v > clusterBoundsVS.Max[i])
        {
            sqDist += (v - clusterBoundsVS.Max[i]) * (v - clusterBoundsVS.Max[i]);
        }
    }

    return sqDist;
}

// https://bartwronski.com/2017/04/13/cull-that-cone/
bool CheckSpotLightVSClusterBoundingSphere(const AAAAPunctualLightData punctualLightData, const float4 clusterBoundingSphere)
{
    const float3 lightOriginVS = TransformWorldToView(punctualLightData.PositionWS.xyz);
    const float3 lightDirectionVS = TransformWorldToViewDir(punctualLightData.SpotDirection_Angle.xyz, true);

    const float  angle = punctualLightData.SpotDirection_Angle.w;
    const float3 V = clusterBoundingSphere.xyz - lightOriginVS;
    const float  VlenSq = dot(V, V);
    const float  V1len = dot(V, -lightDirectionVS);
    const float  distanceClosestPoint = cos(angle) * sqrt(VlenSq - V1len * V1len) - V1len * sin(angle);

    const bool angleCull = distanceClosestPoint > clusterBoundingSphere.w;
    const bool frontCull = V1len > clusterBoundingSphere.w + punctualLightData.Color_Radius.w;
    const bool backCull = V1len < -clusterBoundingSphere.w;
    return !(angleCull || frontCull || backCull);
}

bool CheckPointLightVsClusterAABB(const AAAAPunctualLightData punctualLightData, const AAAAClusterBounds clusterBounds)
{
    const float  lightRadius = punctualLightData.Color_Radius.w;
    const float3 lightCenterWS = punctualLightData.PositionWS.xyz;
    const float3 lightCenterVS = TransformWorldToView(lightCenterWS);
    const float  squaredDistance = ComputePointToAABBDistanceSq(lightCenterVS, clusterBounds);
    return lightRadius > 0 && squaredDistance <= lightRadius * lightRadius;
}

bool CheckLightVSCluster(const uint cachedLightIndex, const AAAAClusterBounds clusterBounds, const float4 clusterBoundingSphere)
{
    const AAAAPunctualLightData punctualLightData = g_CachedPunctualLights[cachedLightIndex];
    bool                        isVisible = CheckPointLightVsClusterAABB(punctualLightData, clusterBounds);

    UNITY_BRANCH
    if (isVisible && punctualLightData.SpotDirection_Angle.w > 0.0f)
    {
        isVisible = CheckSpotLightVSClusterBoundingSphere(punctualLightData, clusterBoundingSphere);
    }

    return isVisible;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void CS(const uint3 dispatchThreadID : SV_DispatchThreadID, const uint3 groupThreadID : SV_GroupThreadID)
{
    // Don't do early exists to keep all threads alive until actually flushing the results.
    const uint indexInList = dispatchThreadID.x;
    const uint activeClustersCount = _ActiveClustersCount.Load(0);
    const bool outOfActiveClustersListBounds = indexInList >= activeClustersCount;
    const uint flatClusterIndex = _ActiveClustersList.Load(4 * min(indexInList, activeClustersCount - 1));

    uint visibleLightCount = 0;
    uint visibleLightIndices[MAX_LIGHTS_PER_CLUSTER];

    const AAAAClusterBounds clusterBounds = _ClusterBounds[flatClusterIndex];
    const float4            clusterBoundingSphere = ClusterBoundsToBoundingSphere(clusterBounds);

    GroupMemoryBarrierWithGroupSync();

    for (uint baseLightIndex = 0; baseLightIndex < PunctualLightCount; baseLightIndex += THREAD_GROUP_SIZE)
    {
        const uint loadedLightIndex = baseLightIndex + groupThreadID.x;
        LoadCachedLights(groupThreadID.x, loadedLightIndex);

        GroupMemoryBarrierWithGroupSync();

        for (uint cachedLightIndex = 0; cachedLightIndex < THREAD_GROUP_SIZE; ++cachedLightIndex)
        {
            if (visibleLightCount < MAX_LIGHTS_PER_CLUSTER && CheckLightVSCluster(cachedLightIndex, clusterBounds, clusterBoundingSphere))
            {
                visibleLightIndices[visibleLightCount++] = baseLightIndex + cachedLightIndex;
            }
        }
    }

    GroupMemoryBarrierWithGroupSync();

    UNITY_BRANCH
    if (!outOfActiveClustersListBounds)
    {
        uint indexListOffset;
        _LightIndexCounter.InterlockedAdd(0, visibleLightCount, indexListOffset);

        for (uint i = 0; i < visibleLightCount; ++i)
        {
            const uint indexListAddress = 4 * (indexListOffset + i);
            _LightIndexList.Store(indexListAddress, visibleLightIndices[i]);
        }

        AAAAClusteredLightingGridCell cell;
        cell.Offset = indexListOffset;
        cell.Count = visibleLightCount;
        _LightGrid[flatClusterIndex] = cell;
    }
}